{"version":3,"sources":["webpack:///src/app/core/store/store.service.ts","webpack:///src/app/core/core-lib/helpers.ts"],"names":["EGameStatus","EPiece","W_KING","B_KING","emptyBoard","StoreService","profile","afAuth","afs","getGames","games$","pipe","toPromise","getGame$","gameId","doc","valueChanges","getGame","resetGame","game","history","status","WHITE","board","startTime","Date","toString","canPlayGame","BLACK","squareRow","num","Math","floor","square2D","squareColor","getPiece","code","pType","name","color","img","includes","WRook1","WRook2","WKnight1","WKnight2","WBishop1","WBishop2","WQueen","WKing","BRook1","BRook2","BKnight1","BKnight2","BBishop1","BBishop2","BQueen","BKing","toLowerCase","getAllValidMoves","moves","playerPieces","forEach","piece","getValidMoves","pos","map","filter","p","posOri","fullCheck","col","row","validMoves","yourColor","otherColor","pieceAt","isIn","isEmpty","isYours","isOther","is","values","addMove","posDes","nextMove","takes","nextBoard","keyFilter","note","push","addMoveIf","t","checkEnPassant","length","lastMove","getLast","lastDesCol","lastDesRow","lastPiece","row1","row16","move","isPosAttacked","otherPiece","attackMoves","every","m","nextGame","some","killMoves","isPawnFinished","isCheck","lastMoveColor","isCheckMate","nextMoveColor","pieces","getMoveNote","promotedPieceCode","getNonUniqueNote","oriFile","oriRank","mLetter","xTaking","desFile","desRank","promote","toUpperCase","allMoves","console","error","find","gamesCol","collection","snapshotChanges","actions","a","data","payload","id","newGame","requestDate","player1","user","player2","playerName1","displayName","playerName2","token1","createId","token2","REQUESTED","lastPing1","lastPing2","chat","videoStatus","offerSDP","answerSDP","videoConfig","cam1On","mic1On","cam2On","mic2On","log","add","then","gameDoc","update","loserId","DRAW","BLACK_WON_BY_RESIGN","WHITE_WON_BY_RESIGN","makeMove","updateGame","timeStamp","promotedTo","WHITE_WON_BY_MATE","BLACK_WON_BY_MATE","slice","v","pad","join","providedIn","dateToStr","dateVal","res","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","strToDate","day","month","rest"],"mappings":"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","file":"default~src-app-pages-game-game-module~src-app-pages-games-games-module-es5.js","sourcesContent":["import {Injectable} from '@angular/core';\nimport {AngularFireAuth} from '@angular/fire/auth';\nimport {map, take} from 'rxjs/operators';\nimport {AngularFirestore, AngularFirestoreCollection} from '@angular/fire/firestore';\nimport {Observable} from 'rxjs';\nimport {JbProfileService} from '@core/common/jb-profile.service';\nimport {dCopy} from 'jb-ui-lib';\nimport {dateToStr} from '@core/core-lib/helpers';\n\nexport enum EGameStatus {\n  REQUESTED = 'REQUESTED',\n  WHITE = 'WHITE',\n  BLACK = 'BLACK',\n  DRAW = 'DRAW',\n  WHITE_WON_BY_MATE = 'WHITE WON BY MATE',\n  BLACK_WON_BY_MATE = 'BLACK WON BY MATE',\n  WHITE_WON_BY_TIMEOUT = 'WHITE WON BY TIMEOUT',\n  BLACK_WON_BY_TIMEOUT = 'BLACK WON BY TIMEOUT',\n  WHITE_WON_BY_RESIGN = 'WHITE WON BY RESIGN',\n  BLACK_WON_BY_RESIGN = 'BLACK WON BY RESIGN',\n}\n\nexport interface IChatMsg {\n  order: number;\n  timeMsg: string;\n  text: string;\n  owner: string;\n}\n\nexport interface IVideoConf {\n  cam1On: boolean;    mic1On: boolean;  // Whether player 1 video/audio stream is on\n  cam2On: boolean;    mic2On: boolean;  // Whether player 2 video/audio stream is on\n}\n\n\n\nexport interface IGameDoc {\n  player1: string,\n  player2: string,\n  playerName1: string,\n  playerName2: string,\n  status: EGameStatus;\n  requestDate ?: string;\n  startTime   ?: string;\n  history: Array<IMove>;\n  board: Array<EPiece | 0>;\n  token1: string;\n  token2: string;\n  chat: Array<IChatMsg>;\n\n  videoStatus: string;  /*  ''     No call\n                            'A-> ' A calling B              ' <-B' B calling A\n                            'A->B' A calling B (Ringing)    'A<-B' B calling A (Ringing)\n                            'A>>B' WebRTC connecting        'A<<B' WebRTC connecting\n                            'A==B' Connected   */\n  offerSDP: string;   // The WebRTC offer SDP (caller)\n  answerSDP: string;  // The WebRTC answer SDP (callee)\n  lastPing1: string;\n  lastPing2: string;\n  videoConfig: IVideoConf;\n}\n\nexport enum EPiece {\n  BRook1 = 25, BKnight1 = 26, BBishop1 = 27, BQueen = 28, BKing  = 29, BBishop2 = 30, BKnight2 = 31, BRook2 = 32,\n  BPawn1 = 17, BPawn2   = 18, BPawn3   = 19, BPawn4 = 20, BPawn5 = 21, BPawn6   = 22, BPawn7   = 23, BPawn8 = 24,\n  WPawn1 = 1,  WPawn2   = 2,  WPawn3   = 3,  WPawn4 = 4,  WPawn5 = 5,  WPawn6   = 6,  WPawn7   = 7,  WPawn8 = 8,\n  WRook1 = 9,  WKnight1 = 10, WBishop1 = 11, WQueen = 12, WKing  = 13, WBishop2 = 14, WKnight2 = 15, WRook2 = 16,\n}\ninterface IPiece {\n  code: EPiece;\n  name: 'pawn' | 'rook' | 'knight' | 'bishop' | 'queen' | 'king';\n  color: 'BLACK' | 'WHITE';\n  img: string;\n}\n\nconst W_KING = 13;\nconst B_KING = 29;\n\nexport interface IMove {\n  posOri      : number;             // original position of the moving piece\n  posDes      : number;             // destination position of the moving piece\n  piece       : IPiece;             // object with the moving piece ({ code, color, name, img })\n  note       ?: string;             // official notation text for the move\n  nextBoard   : Array<EPiece | 0>;  // The game.board[] array after the move\n  takes      ?: EPiece;             // the piece that is being taken (if any. if none, 0)\n  promotedTo ?: EPiece;             // if the move is promoting a pawn, the code of the new piece\n  timeStamp   : string;             // time the move's been made (js time)\n}\n\n\nconst emptyBoard = [\n 25, 26, 27, 28, 29, 30, 31, 32,  // 0-7    0\n 17, 18, 19, 20, 21, 22, 23, 24,  // 8-15   1\n  0,  0,  0,  0,  0,  0,  0,  0,  // 16-23  2\n  0,  0,  0,  0,  0,  0,  0,  0,  // 24-31  3\n  0,  0,  0,  0,  0,  0,  0,  0,  // 32-39  4\n  0,  0,  0,  0,  0,  0,  0,  0,  // 40-47  5\n  1,  2,  3,  4,  5,  6,  7,  8,  // 48-55  6\n  9, 10, 11, 12, 13, 14, 15, 16,  // 56-63  7\n];\n\n//   R   Kn  B   Q   K   B   Kn  R            R   Kn  B   Q   K   B   Kn  R\n//   ----------------------------------------------------------------------\n//   25, 26, 27, 28, 29, 30, 31, 32,  | 0 |  00  01  02  03  04  05  06  07\n//   17, 18, 19, 20, 21, 22, 23, 24,  | 1 |  08  09  10  11  12  13  14  15\n//   0,  0,  0,  0,  0,  0,  0,  0,   | 2 |  16  17  18  19  20  21  22  23\n//   0,  0,  0,  0,  0,  0,  0,  0,   | 3 |  24  25  26  27  28  29  30  31\n//   0,  0,  0,  0,  0,  0,  0,  0,   | 4 |  32  33  34  35  36  37  38  39\n//   0,  0,  0,  0,  0,  0,  0,  0,   | 5 |  40  41  42  43  44  45  46  47\n//   1,  2,  3,  4,  5,  6,  7,  8,   | 6 |  48  49  50  51  52  53  54  55\n//   9, 10, 11, 12, 13, 14, 15, 16,   | 7 |  56  57  58  59  60  61  62  63\n//   ----------------------------------------------------------------------\n//   R  Kn   B   Q   K   B  Kn   R            R  Kn   B   Q   K   B  Kn   R\n\n\n\n\n@Injectable({ providedIn: 'root', })\nexport class StoreService {\n  public gamesCol: AngularFirestoreCollection<IGameDoc>;\n  public games$: Observable<IGameDoc[]>;\n\n  constructor(\n    private profile: JbProfileService,\n    private afAuth: AngularFireAuth,\n    private afs: AngularFirestore,\n  ) {\n    this.gamesCol = this.afs.collection<IGameDoc>('games');\n    this.games$ = this.gamesCol.snapshotChanges().pipe(\n      map(actions => actions.map(a => {\n        const data = a.payload.doc.data() as IGameDoc;\n        const id = a.payload.doc.id;\n        return { id, ...data };\n      }))\n    );\n\n\n  }\n\n  public getGames = (): any => this.games$.pipe(take(1)).toPromise();\n  public getGame$ = gameId => this.afs.doc<IGameDoc>('/games/' + gameId).valueChanges();\n  public getGame  = gameId => this.getGame$(gameId).pipe(take(1)).toPromise();\n\n\n  public newGame() { // TODO: Move this to a cloud function (games should be read only)\n    // return this.getGames().then(games => { // Find a requested game to join as player 2\n    //   const game = games.find(g => this.canJoinGame(g));\n    //   if (game) { return this.joinGame(game); }\n    //   return this.requestGame(); // If none, create a new game\n    // });\n    const newGame = {\n      requestDate : dateToStr(new Date()),\n      startTime   : null,\n      player1     : this.profile.user.id,\n      player2     : null,\n      playerName1 : this.profile.user.displayName,\n      playerName2 : 'Guest',\n      token1      : this.afs.createId(),\n      token2      : this.afs.createId(),\n      status      : EGameStatus.REQUESTED,\n      history     : [],\n      board       : [...emptyBoard],\n      lastPing1   : null,\n      lastPing2   : null,\n      chat        : [],\n      videoStatus : '',\n      offerSDP    : null,\n      answerSDP   : null,\n      videoConfig : { cam1On: true, mic1On: true, cam2On: true, mic2On: true }\n    }\n    console.log('newGame', newGame);\n    return this.gamesCol.add(newGame).then(game => {\n      return { ...newGame, id: game.id };\n    });\n  }\n\n  public joinGame(game) {\n      const gameDoc = this.afs.doc<IGameDoc>('games/' + game.id);\n      return gameDoc.update({ ...game,\n        startTime   : (new Date()).toString(),\n        player2     : this.profile.user.id,\n        playerName2 : this.profile.user.displayName,\n        status      : EGameStatus.WHITE,\n        history     : [],\n        board       : [...emptyBoard],\n      });\n  }\n\n  public updateGamePlayer(game) {\n      const gameDoc = this.afs.doc<IGameDoc>('games/' + game.id);\n      return gameDoc.update({\n        player2     : this.profile.user.id,\n        playerName2 : this.profile.user.displayName,\n      });\n  }\n\n  public endGame(game, loserId?: string) {\n    let status = EGameStatus.DRAW;\n    if (game.player1 === loserId) { status = EGameStatus.BLACK_WON_BY_RESIGN; }\n    if (game.player2 === loserId) { status = EGameStatus.WHITE_WON_BY_RESIGN; }\n    const gameDoc = this.afs.doc<IGameDoc>('games/' + game.id);\n    return gameDoc.update({ ...game, status });\n  }\n\n  public deleteGame(gameId) {\n    return this.afs.doc<IGameDoc>('games/' + gameId).delete();\n  }\n\n  // public joinGame(game) {\n  //   const gameDoc = this.afs.doc<IGameDoc>('games/' + game.id);\n  //   const joinGame = {\n  //     requestDate : game.requestDate,\n  //     startTime   : (new Date()).toString(),\n  //     player1     : game.player1,\n  //     player2     : this.profile.user.id,\n  //     playerName1 : game.playerName1,\n  //     playerName2 : this.profile.user.displayName,\n  //     status      : EGameStatus.WHITE,\n  //     history     : [],\n  //     board       : [...emptyBoard],\n  //   };\n  //   return gameDoc.update(joinGame);\n  // }\n\n  public commitMove(game, posOri, posDes, promotedPieceCode?) {\n    this.makeMove(game, posOri, posDes, promotedPieceCode);\n    return this.updateGame(game);\n  }\n\n  public makeMove(game, posOri, posDes, promotedPieceCode?) {\n    const validMoves = this.getValidMoves(game, posOri);\n    const move = validMoves.find(move => move.posOri === posOri && move.posDes === posDes);\n    if (!move) { return null; }\n    move.note = this.getMoveNote(game, posOri, posDes, promotedPieceCode);\n    move.timeStamp = (new Date()).toString();\n\n    if (promotedPieceCode) {\n      move.promotedTo = promotedPieceCode;\n      move.nextBoard[posDes] = promotedPieceCode;\n    }\n\n    game.history.push(move);\n    game.board = [...move.nextBoard];\n    game.status = game.status === EGameStatus.WHITE ? EGameStatus.BLACK : EGameStatus.WHITE;\n    if (this.isCheckMate(game)) {\n      game.status = move.piece.color === 'WHITE' ? EGameStatus.WHITE_WON_BY_MATE : EGameStatus.BLACK_WON_BY_MATE;\n    }\n\n    console.log(game.board.slice( 0,  8).map(v => ('' + v).pad(5, ' ')).join()\n       + '\\n' + game.board.slice( 8, 16).map(v => ('' + v).pad(5, ' ')).join()\n       + '\\n' + game.board.slice(16, 24).map(v => ('' + v).pad(5, ' ')).join()\n       + '\\n' + game.board.slice(24, 32).map(v => ('' + v).pad(5, ' ')).join()\n       + '\\n' + game.board.slice(32, 40).map(v => ('' + v).pad(5, ' ')).join()\n       + '\\n' + game.board.slice(40, 48).map(v => ('' + v).pad(5, ' ')).join()\n       + '\\n' + game.board.slice(48, 56).map(v => ('' + v).pad(5, ' ')).join()\n       + '\\n' + game.board.slice(56, 64).map(v => ('' + v).pad(5, ' ')).join()\n    );\n\n    return move;\n  }\n\n  // TODO: This should trigger a cloud function that validates the move\n  public updateGame(game) {\n    const gameDoc = this.afs.doc<IGameDoc>('games/' + game.id);\n    return gameDoc.update(game);\n  }\n\n  public resetGame = (game) => {\n    game.history = [];\n    game.status = EGameStatus.WHITE;\n    game.board = [...emptyBoard];\n    game.startTime = (new Date()).toString();\n  }\n\n\n  // --------------- Helpers ---------------\n  public canJoinGame(game) {\n    return game.status === EGameStatus.REQUESTED\n      && game.player1 !== this.profile.user.id\n      && game.player2 === null\n  }\n\n  public canPlayGame = game => game.status === EGameStatus.WHITE || game.status === EGameStatus.BLACK;\n\n  public squareRow = num => Math.floor(num / 8);\n  public square2D = num => [num % 8, this.squareRow(num)];  // row = [0, ... 7]\n  public squareColor = num => (num + (this.squareRow(num) % 2)) % 2 === 0 ? 'white' : 'black';\n\n\n  public getPiece = (code): IPiece => {\n    const pType = { code, name: '', color: '', img: '' };\n    if ([1, 2, 3, 4, 5, 6, 7, 8].includes(code))            { pType.name = 'pawn';    pType.color = 'WHITE'; }\n    if ([EPiece.WRook1,   EPiece.WRook2].includes(code))    { pType.name = 'rook';    pType.color = 'WHITE'; }\n    if ([EPiece.WKnight1, EPiece.WKnight2].includes(code))  { pType.name = 'knight';  pType.color = 'WHITE'; }\n    if ([EPiece.WBishop1, EPiece.WBishop2].includes(code))  { pType.name = 'bishop';  pType.color = 'WHITE'; }\n    if (code === EPiece.WQueen)                             { pType.name = 'queen';   pType.color = 'WHITE'; }\n    if (code === EPiece.WKing)                              { pType.name = 'king';    pType.color = 'WHITE'; }\n    if ([17, 18, 19, 20, 21, 22, 23, 24].includes(code))    { pType.name = 'pawn';    pType.color = 'BLACK'; }\n    if ([EPiece.BRook1,   EPiece.BRook2].includes(code))    { pType.name = 'rook';    pType.color = 'BLACK'; }\n    if ([EPiece.BKnight1, EPiece.BKnight2].includes(code))  { pType.name = 'knight';  pType.color = 'BLACK'; }\n    if ([EPiece.BBishop1, EPiece.BBishop2].includes(code))  { pType.name = 'bishop';  pType.color = 'BLACK'; }\n    if (code === EPiece.BQueen)                             { pType.name = 'queen';   pType.color = 'BLACK'; }\n    if (code === EPiece.BKing)                              { pType.name = 'king';    pType.color = 'BLACK'; }\n\n    if (pType.name) { pType.img = `assets/${pType.color[0].toLowerCase()}-${pType.name}.png`; }\n    return pType as IPiece;\n  }\n\n\n  // It returns all valid moves every piece can make in the current turn\n  public getAllValidMoves = (game) => {\n    if (game.status !== EGameStatus.WHITE && game.status !== EGameStatus.BLACK) { return []; }\n    let moves = [];\n    this.playerPieces(game.status, game.board).forEach(piece => {\n      moves = [ ...moves, ...this.getValidMoves(game, piece.pos) ];\n    });\n    return moves;\n  };\n\n  // Returns an array with the (color) players pieces and their positions\n  public playerPieces = (color, board): Array<IPiece & { pos: number }> => {\n    return board.map((code, pos) => ({ ...this.getPiece(code), pos })).filter(p => p.color === color);\n  }\n\n  // It returns an array with all possible moves a single piece can make at the current state\n  // Every move contains: {\n  //    posOri --> original position of the moving piece\n  //    posDes --> destination position of the moving piece\n  //    piece ---> object with the moving piece ({ code, color, name })\n  //    takes ---> the piece that is being taken (if any. if none, 0)\n  //    note ----> official notation text for the move\n  //    nextBoard --> The game.board[] array after the move\n  // }\n  public getValidMoves = (game, posOri, fullCheck = true) => {\n    const board = game.board;\n    const piece = this.getPiece(board[posOri]);\n    const [col, row] = this.square2D(posOri);\n    const validMoves: Array<IMove> = [];\n    const yourColor = piece.color;\n    const otherColor = piece.color === 'WHITE' ? 'BLACK' : 'WHITE';\n\n    // Returns an object with the piece at that position + helpers\n    const pieceAt = (col, row) => {\n      const isIn = row >= 0 && row <= 7 && col >= 0 && col <= 7;\n      const pos = (row * 8) + col;\n      const code = board[pos];\n      const piece = this.getPiece(code);\n      return { pos, code, piece,\n        isEmpty: () => isIn && code === 0,\n        isYours: () => isIn && piece?.color === yourColor,\n        isOther: () => isIn && piece?.color === otherColor,\n        is: (values) => {\n          if (!isIn) { return false; }\n          if (values.includes('empty') && code === 0) { return true; }\n          if (values.includes(piece.color)) { return true; }\n          return false;\n        }\n      };\n    };\n\n    // Adds a move to the validMoves[] array\n    const addMove = (col, row) => {\n      if (row >= 0 && row <= 7 && col >= 0 && col <= 7) {\n        const posDes = (row * 8) + col;\n        const nextMove: any = { posOri, posDes, takes: game.board[posDes], nextBoard: dCopy(game.board) };\n        nextMove.nextBoard[posDes] = nextMove.nextBoard[posOri];\n        nextMove.nextBoard[posOri] = 0;\n        nextMove.piece = piece.keyFilter('code,color,name');\n        nextMove.note = '';  // will be calculated later\n        validMoves.push(nextMove);\n        return nextMove;\n      }\n    };\n\n    // If the given position is valid (has any of the values[]) add the move. Return the piece at that position\n    const addMoveIf = (col, row, values) => {\n      const piece = pieceAt(col, row);\n      if (piece.is(values)) { addMove(col, row); }\n      return piece;\n    };\n\n    if (piece.name === 'knight' && piece.color === yourColor) {\n      addMoveIf(col - 1, row - 2, ['empty', otherColor]);\n      addMoveIf(col + 1, row - 2, ['empty', otherColor]);\n      addMoveIf(col - 2, row - 1, ['empty', otherColor]);\n      addMoveIf(col + 2, row - 1, ['empty', otherColor]);\n      addMoveIf(col - 2, row + 1, ['empty', otherColor]);\n      addMoveIf(col - 1, row + 2, ['empty', otherColor]);\n      addMoveIf(col + 2, row + 1, ['empty', otherColor]);\n      addMoveIf(col + 1, row + 2, ['empty', otherColor]);\n    }\n    if ((piece.name === 'queen' || piece.name === 'rook') && piece.color === yourColor) {\n      for (let t = 1; t <= 8; t++) { if (!addMoveIf(col, row - t, ['empty', otherColor]).isEmpty()) { break; } }\n      for (let t = 1; t <= 8; t++) { if (!addMoveIf(col, row + t, ['empty', otherColor]).isEmpty()) { break; } }\n      for (let t = 1; t <= 8; t++) { if (!addMoveIf(col - t, row, ['empty', otherColor]).isEmpty()) { break; } }\n      for (let t = 1; t <= 8; t++) { if (!addMoveIf(col + t, row, ['empty', otherColor]).isEmpty()) { break; } }\n    }\n    if ((piece.name === 'queen' || piece.name === 'bishop') && piece.color === yourColor) {\n      for (let t = 1; t <= 8; t++) { if (!addMoveIf(col - t, row - t, ['empty', otherColor]).isEmpty()) { break; } }\n      for (let t = 1; t <= 8; t++) { if (!addMoveIf(col - t, row + t, ['empty', otherColor]).isEmpty()) { break; } }\n      for (let t = 1; t <= 8; t++) { if (!addMoveIf(col + t, row - t, ['empty', otherColor]).isEmpty()) { break; } }\n      for (let t = 1; t <= 8; t++) { if (!addMoveIf(col + t, row + t, ['empty', otherColor]).isEmpty()) { break; } }\n    }\n    if (piece.name === 'king' && piece.color === yourColor) {\n      addMoveIf(col - 1, row - 1, ['empty', otherColor]);\n      addMoveIf(col,     row - 1, ['empty', otherColor]);\n      addMoveIf(col + 1, row - 1, ['empty', otherColor]);\n      addMoveIf(col - 1, row,     ['empty', otherColor]);\n      addMoveIf(col + 1, row,     ['empty', otherColor]);\n      addMoveIf(col - 1, row + 1, ['empty', otherColor]);\n      addMoveIf(col,     row + 1, ['empty', otherColor]);\n      addMoveIf(col + 1, row + 1, ['empty', otherColor]);\n    }\n\n    // En Passant (Pawn takes pawn next to it moving in diagonal, after opponent's pawn moved 2 positions opening)\n    // - The capturing pawn must have advanced exactly three ranks to perform this move.\n    // - The captured pawn must have moved two squares in one move, landing right next to the capturing pawn.\n    // - The en passant capture must be performed on the turn immediately after the pawn being captured moves.\n    const checkEnPassant = (color) => {\n      if (!game.history.length) { return; }\n      const lastMove = game.history.getLast();\n      const [lastDesCol, lastDesRow] = this.square2D(lastMove.posDes);\n      const lastPiece = pieceAt(lastDesCol, lastDesRow);\n      const row1  = color === 'WHITE' ? -1 : 1;\n      const row16 = row1 * 16;\n      if (lastPiece.piece.name === 'pawn' && lastMove.posOri === lastMove.posDes + row16 && row === lastDesRow) {\n        if (lastDesCol === col - 1) {\n          const move = addMove(col - 1, row + row1);\n          move.takes =  move.nextBoard[lastMove.posDes];\n          move.nextBoard[lastMove.posDes] = 0;\n        }\n        if (lastDesCol === col + 1) {\n          const move = addMove(col + 1, row + row1);\n          move.takes = move.nextBoard[lastMove.posDes];\n          move.nextBoard[lastMove.posDes] = 0;\n        }\n      }\n    }\n\n    if (piece.name === 'pawn' && piece.color === 'WHITE') {\n      if (row === 6 && pieceAt(col, row - 1).isEmpty() && pieceAt(col, row - 2).isEmpty()) { addMove(col, row - 2); }  // Advance 2\n      addMoveIf(col, row - 1, ['empty']); // Advance 1\n      addMoveIf(col - 1, row - 1, [otherColor]); // Kill left\n      addMoveIf(col + 1, row - 1, [otherColor]); // Kill right\n      checkEnPassant(piece.color);\n    }\n    if (piece.name === 'pawn' && piece.color === 'BLACK') {\n      if (row === 1 && pieceAt(col, row + 1).isEmpty() && pieceAt(col, row + 2).isEmpty()) { addMove(col, row + 2); }  // Advance 2\n      addMoveIf(col, row + 1, ['empty']); // Advance 1\n      addMoveIf(col - 1, row + 1, [otherColor]); // Kill left\n      addMoveIf(col + 1, row + 1, [otherColor]); // Kill right\n      checkEnPassant(piece.color);\n    }\n\n\n    // Checks if the given position is being attacked by an opponent's piece. If so, it returns the attacker piece\n    const isPosAttacked = (pos) => {\n      if (!fullCheck) { return false; } // avoid recursivity\n      for (const otherPiece of this.playerPieces(otherColor, board)) {\n        const attackMoves = this.getValidMoves(game, otherPiece.pos, false).filter(move => move.posDes === pos);\n        if (attackMoves.length > 0) { return otherPiece; }\n      }\n    }\n\n    // Castling\n    // - The king and the rook may not have moved from their starting squares if you want to castle.\n    // - All spaces between the king and the rook must be empty.\n    // - The king cannot be in check.\n    // - The squares that the king passes over must not be under attack, nor the square where it lands on.\n    if (piece.code === W_KING && piece.color === yourColor && game.history.every(m => m.piece.code !== W_KING)) { // white king\n      if (game.history.every(m => m.piece !== 16)) {  // King <-> Right Rook\n        if (pieceAt(5, 7).isEmpty() && pieceAt(6, 7).isEmpty()) {\n          if (!isPosAttacked(60) && !isPosAttacked(61) && !isPosAttacked(62)) {\n            const move = addMove(6, 7);\n            move.nextBoard[63] = 0; move.nextBoard[61] = 16;\n          }\n        }\n      }\n      if (game.history.every(m => m.piece.code !== 9)) { // Left Rook <-> King\n        if (pieceAt(1, 7).isEmpty() && pieceAt(2, 7).isEmpty() && pieceAt(3, 7).isEmpty()) {\n          if (!isPosAttacked(60) && !isPosAttacked(59) && !isPosAttacked(58)) {\n            const move = addMove(2, 7);\n            move.nextBoard[56] = 0; move.nextBoard[59] = 9;\n          }\n        }\n      }\n    }\n    if (piece.code === B_KING && piece.color === yourColor && game.history.every(m => m.piece.code !== B_KING)) { // black king\n      if (game.history.every(m => m.piece.code !== 32)) {  // Right Rook\n        if (pieceAt(5, 0).isEmpty() && pieceAt(6, 0).isEmpty()) {\n          if (!isPosAttacked(4) && !isPosAttacked(5) && !isPosAttacked(6)) {\n            const move = addMove(6, 0);\n            move.nextBoard[7] = 0; move.nextBoard[5] = 32;\n          }\n        }\n      }\n      if (game.history.every(m => m.piece.code !== 25)) { // Left Rook\n        if (pieceAt(1, 0).isEmpty() && pieceAt(2, 0).isEmpty() && pieceAt(3, 0).isEmpty()) {\n          if (!isPosAttacked(4) && !isPosAttacked(3) && !isPosAttacked(2)) {\n            const move = addMove(2, 0);\n            move.nextBoard[0] = 0; move.nextBoard[3] = 25;\n          }\n        }\n      }\n    }\n\n\n\n    if (!fullCheck) { return validMoves; } // exclude moves that would cause mate (to avoid recursivity)\n\n    // Invalidate mate moves:\n    // If a move puts the king in a position that can be taken at the next move, remove it because it is not valid\n    return validMoves.filter(move => {\n      const nextGame = dCopy(game);\n      nextGame.board = move.nextBoard;\n      nextGame.history.push(move);\n      // Filter opponent's pieces and calculate all opponent's valid moves after move.\n      // If any of these calculated valid moves takes the king, invalidate the current move.\n      return !this.playerPieces(otherColor, board).some(piece => {\n        const killMoves = this.getValidMoves(nextGame, piece.pos, false).filter(nextMove => {\n          return yourColor === 'WHITE' && nextMove.takes === W_KING\n              || yourColor === 'BLACK' && nextMove.takes === B_KING;\n        });\n        // if (killMoves.length > 0) { console.log('Killing moves', piece, killMoves); }\n        return killMoves.length > 0;\n      });\n    });\n\n  }\n\n\n  // Check if the move is a Pawn reaching the other side of the board\n  public isPawnFinished = (posOri, posDes, piece) => {\n    if (piece.name === 'pawn') {\n      if (piece.color === 'WHITE' && [0,1,2,3,4,5,6,7].includes(posDes)) { return true; }\n      if (piece.color === 'BLACK' && [56,57,58,59,60,61,62,63].includes(posDes)) { return true; }\n    }\n    return false;\n  }\n\n\n  // Check if the current game is in check.\n  // If the last color plays again, and there is a valid move that kills the king, it's check.\n  public isCheck = (game) => {\n    const lastMoveColor = game.history.getLast()?.piece?.color;\n    for (const piece of this.playerPieces(lastMoveColor, game.board)) {\n      for (const move of this.getValidMoves(game, piece.pos, false)) {\n        if (lastMoveColor === 'WHITE' && move.takes === B_KING) { return true; }\n        if (lastMoveColor === 'BLACK' && move.takes === W_KING) { return true; }\n      }\n    }\n    return false;\n  }\n\n  // Check if the current game is in check mate. Calculate all next valid moves. If none, it's mate\n  public isCheckMate = (game) => {\n    const nextMoveColor = game.history.getLast()?.piece?.color === 'WHITE' ? 'BLACK' : 'WHITE'\n    const pieces = this.playerPieces(nextMoveColor, game.board);\n    for (const piece of pieces) { // If there is a valid move, it's not mate\n      if (this.getValidMoves(game, piece.pos).length) { return false; }\n    }\n    return true;\n  }\n\n\n\n  public getMoveNote = (game, posOri, posDes, promotedPieceCode?) => {\n\n    // Return the move notation string https://en.wikipedia.org/wiki/Algebraic_notation_(chess)#Notation_for_moves\n    const getNonUniqueNote = (move: IMove, oriFile = false, oriRank = false) => {\n      let mLetter = false;    // format[0]\n      // let oriFile = false; // format[1]\n      // let oriRank = false; // format[2]\n      let xTaking = false;    // format[3]\n      let desFile = true;     // format[4]\n      let desRank = true;     // format[5]\n      let promote = false;    // format[6]\n\n      let note = '';\n      if (move.piece.name !== 'pawn') { mLetter = true; }               // Piece letter (except pawn)\n      if (move.piece.name === 'pawn' && move.takes) { oriFile = true; } // When pawn takes, add origin file\n      if (move.takes) { xTaking = true; } // When taking, add the 'x' between origin / dest\n      if (promotedPieceCode) { promote = true; } // If a pawn is being promoted\n\n      // Each position indicates whether to leave it empty (false) or to add the value (true)\n      note = (!mLetter ? '' : move.piece.name[0].toUpperCase())         // 0 - Letter of the moving piece\n           + (!oriFile ? '' : 'abcdefgh'[move.posOri % 8])              // 1 - Original file of the moving piece (oriFile)\n           + (!oriRank ? '' : (8 - Math.floor(move.posOri / 8)) + '')   // 2 - Original rank of the moving piece (oriRank)\n           + (!xTaking ? '' : 'x')                                      // 3 - Whether it takes another piece (x)\n           + (!desFile ? '' : 'abcdefgh'[move.posDes % 8])              // 4 - Destination file of the moving piece (desFile)\n           + (!desRank ? '' : (8 - Math.floor(move.posDes / 8)) + '')   // 5 - Destination rank of the moving piece (desRank)\n           + (!promote ? '' : ('=' + this.getPiece(promotedPieceCode).name[0].toUpperCase())); // 6 - Letter of the promoted piece\n\n      return note;\n    };\n\n\n    // Disambiguating moves\n    // When two (or more) identical pieces can move to the same square, the moving piece is uniquely identified\n    // by specifying the piece's letter, followed by (in descending order of preference):\n    //  1. the file of departure (if they differ); or\n    //  2. the rank of departure (if the files are the same but the ranks differ); or\n    //  3. both the file and rank of departure (if neither alone is sufficient to identify the piece\n    const allMoves = this.getAllValidMoves(game).map(move => {\n      return [\n        { ...move, note: getNonUniqueNote(move, false, false) },  // no file nor rank\n        { ...move, note: getNonUniqueNote(move, true,  false) },  // add file\n        { ...move, note: getNonUniqueNote(move, false, true)  },  // add rank\n        { ...move, note: getNonUniqueNote(move, true,  true)  },  // add file + rank\n      ];\n    });\n    const moves = allMoves.map(move => {\n      if (allMoves.filter(m => m[0].note === move[0].note).length < 2) { return move[0]; }\n      if (allMoves.filter(m => m[1].note === move[1].note).length < 2) { return move[1]; }\n      if (allMoves.filter(m => m[2].note === move[2].note).length < 2) { return move[2]; }\n      if (allMoves.filter(m => m[3].note === move[3].note).length < 2) { return move[3]; }\n      console.error('Ambiguity with the move notation!');\n      return move[0];\n    });\n\n    const move = moves.find(move => move.posOri === posOri && move.posDes === posDes);\n\n    // Castling move\n    if (move.piece.code === W_KING && move.posOri === 60 && move.posDes === 62) { move.note = 'O-O'; }   // Kingside castling\n    if (move.piece.code === W_KING && move.posOri === 60 && move.posDes === 58) { move.note = 'O-O-O'; } // Queenside castling\n    if (move.piece.code === B_KING && move.posOri === 4 && move.posDes === 2) { move.note = 'O-O-O'; }   // Kingside castling\n    if (move.piece.code === B_KING && move.posOri === 4 && move.posDes === 6) { move.note = 'O-O'; }     // Queenside castling\n\n    // Check if the status after the move is a check mate\n    const nextGame = dCopy({ ...game, board: move.nextBoard, history: [ ...game.history, move ] });\n\n    if (this.isCheckMate(nextGame))  { move.note += '#'; } // Add a check mate mark '#'\n    else if (this.isCheck(nextGame)) { move.note += '+'; } // Add a check mark '+'\n\n    return move?.note;\n  };\n\n}\n","export const dateToStr = (dateVal) => {\n  let res = '';\n  res += (dateVal.getDate() + '').pad(2);\n  res += '-' + ((dateVal.getMonth() + 1) + '').pad(2);\n  res += '-' + (dateVal.getFullYear() + '').pad(4);\n  res += ' ' + (dateVal.getHours() + '').pad(2);\n  res += ':' + (dateVal.getMinutes() + '').pad(2);\n  res += ':' + (dateVal.getSeconds() + '').pad(2);\n  return res;\n}\nexport const strToDate = (dateVal) => {\n  const day = dateVal.slice(0,2);\n  const month = dateVal.slice(3,5);\n  const rest = dateVal.slice(6);\n  return new Date(`${month}-${day}-${rest}`);\n}\n"]}